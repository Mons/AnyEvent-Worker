NAME
    AnyEvent::Worker - The great new AnyEvent::Worker!

VERSION
    Version 0.01

SYNOPSIS
        use AnyEvent 5;
        use AnyEvent::Worker;

        my $worker1 = AnyEvent::Worker->new( [ 'Actual::Worker::Class' => @init_args ] );
        my $worker2 = AnyEvent::Worker->new( sub { return "Cb 1 @_"; } );

        # Invoke method `test' on Actual::Worker::Class with arguments @args
        $worker1->do( test => @args , sub {
        return warn "Request died: $@" if $@;
        warn "Received response: @_";
        });

        # Just call callback, passed to worker2 with arguments @args
        $worker2->do( @args , sub {
        return warn "Request died: $@" if $@;
        warn "Received response: @_";
        });

METHODS
    $worker->on_error ($cb->($worker, $filename, $line, $fatal))
        Sets (or clears, with "undef") the "on_error" handler.

    $worker->timeout ($seconds)
        Sets (or clears, with "undef") the database timeout. Useful to
        extend the timeout when you are about to make a really long query.

    $worker->do ( @args, $cb->( $worker, @response ) )
        Executes worker code and execure the callback, when response is
        ready

AUTHOR
    Mons Anderson, "<mons at cpan.org>"

COPYRIGHT & LICENSE
    Copyright 2009 Mons Anderson, all rights reserved.

    This program is free software; you can redistribute it and/or modify it
    under the same terms as Perl itself.

